diff --git a/onnx/common/ir_pb_converter.cc b/onnx/common/ir_pb_converter.cc
index 99ab3102..ba127602 100644
--- a/onnx/common/ir_pb_converter.cc
+++ b/onnx/common/ir_pb_converter.cc
@@ -91,6 +91,13 @@ Tensor tensorProtoToTensor(const ONNX_NAMESPACE::TensorProto& tp) {
   if (tp.has_segment()) {
     ret.set_segment_begin_and_end(tp.segment().begin(), tp.segment().end());
   }
+  if (tp.has_data_location()) {
+    ret.setDataLocation(tp.data_location());
+    for (int i = 0; i < tp.external_data_size(); i++) {
+      ret.external_data_kvs().push_back(
+          std::make_pair(tp.external_data(i).key(), tp.external_data(i).value()));
+    }
+  }
   return ret;
 }
 
@@ -462,6 +469,14 @@ void encodeTensor(ONNX_NAMESPACE::TensorProto* p, const Tensor& tensor) {
   if (tensor.is_raw_data()) {
     p->set_raw_data(tensor.raw());
   }
+  if (tensor.hasDataLocation()) {
+    p->set_data_location(ONNX_NAMESPACE::TensorProto_DataLocation(tensor.data_location()));
+    for (const auto& kv : tensor.external_data_kvs()) {
+      auto p_kv = p->add_external_data();
+      p_kv->set_key(kv.first);
+      p_kv->set_value(kv.second);
+    }
+  }
 }
 
 void addAttribute(ONNX_NAMESPACE::NodeProto* n_p, Node* n, Symbol name) {
diff --git a/onnx/common/tensor.h b/onnx/common/tensor.h
index 280b4388..3206764a 100644
--- a/onnx/common/tensor.h
+++ b/onnx/common/tensor.h
@@ -25,6 +25,9 @@ struct Tensor final {
   std::string name_;
   int32_t elem_type_;
   std::vector<int64_t> sizes_;
+  bool has_data_location_;
+  int32_t data_location_;
+  std::vector<std::pair<std::string, std::string>> external_data_kvs_;
 
   std::vector<float> float_data_;
   std::vector<double> double_data_;
@@ -52,7 +55,9 @@ struct Tensor final {
         segment_end_(0),
         has_name_(false),
         elem_type_(ONNX_NAMESPACE::TensorProto_DataType_UNDEFINED),
-        is_raw_data_(false) {}
+        is_raw_data_(false),
+        has_data_location_(false),
+        data_location_(ONNX_NAMESPACE::TensorProto_DataLocation_DEFAULT) {}
 
   Tensor(const Tensor& other)
       : is_segment_(other.is_segment_),
@@ -66,7 +71,9 @@ struct Tensor final {
         int32_data_(other.int32_data_),
         int64_data_(other.int64_data_),
         uint64_data_(other.uint64_data_),
-        is_raw_data_(other.is_raw_data_) {
+        is_raw_data_(other.is_raw_data_),
+        has_data_location_(other.has_data_location_),
+        data_location_(other.data_location_) {
     // Deep copy. Avoid copy on write when using gcc<5.0
     string_data_.resize(other.string_data_.size());
     for (unsigned int i = 0; i < other.string_data_.size(); ++i) {
@@ -74,6 +81,13 @@ struct Tensor final {
     }
     name_ = std::string(other.name_.data(), other.name_.size());
     raw_data_ = std::string(other.raw_data_.data(), other.raw_data_.size());
+    external_data_kvs_.resize(other.external_data_kvs_.size());
+    for (unsigned int i = 0; i < other.external_data_kvs_.size(); ++i) {
+      auto& other_first = other.external_data_kvs_[i].first;
+      auto& other_second = other.external_data_kvs_[i].second;
+      external_data_kvs_[i].first = std::string(other_first.data(), other_first.size());
+      external_data_kvs_[i].second = std::string(other_second.data(), other_second.size());
+    }
   }
   Tensor(Tensor&&) = default;
   ~Tensor() = default;
@@ -95,6 +109,9 @@ struct Tensor final {
     swap(first.is_raw_data_, second.is_raw_data_);
     swap(first.string_data_, second.string_data_);
     swap(first.raw_data_, second.raw_data_);
+    swap(first.has_data_location_, second.has_data_location_);
+    swap(first.data_location_, second.data_location_);
+    swap(first.external_data_kvs_, second.external_data_kvs_);
   }
 
   Tensor& operator=(Tensor other) noexcept {
@@ -102,6 +119,27 @@ struct Tensor final {
     return *this;
   }
 
+  bool hasDataLocation() const {
+    return has_data_location_;
+  }
+
+  void setDataLocation(int32_t data_location) {
+    has_data_location_ = true;
+    data_location_ = data_location;
+  }
+
+  int32_t data_location() const {
+    return data_location_;
+  }
+
+  std::vector<std::pair<std::string, std::string>>& external_data_kvs() {
+    return external_data_kvs_;
+  }
+
+  const std::vector<std::pair<std::string, std::string>>& external_data_kvs() const {
+    return external_data_kvs_;
+  }
+
   const std::vector<int64_t>& sizes() const {
     return sizes_;
   }
