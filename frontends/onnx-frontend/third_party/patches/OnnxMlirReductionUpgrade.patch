diff --git a/src/Conversion/ONNXToStablehlo/Math/Reduction.cpp b/src/Conversion/ONNXToStablehlo/Math/Reduction.cpp
index 9e67d502..66cca0e3 100644
--- a/src/Conversion/ONNXToStablehlo/Math/Reduction.cpp
+++ b/src/Conversion/ONNXToStablehlo/Math/Reduction.cpp
@@ -28,41 +28,78 @@ Value getIdentityValue(
   return nullptr;
 }

-template <>
-Value getIdentityValue<ONNXReduceMaxV13Op>(
+Value getReduceMaxIdentityValue(
     ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
   MathBuilder createMath(rewriter, loc);
   return rewriter.create<stablehlo::ConstantOp>(
       loc, createMath.negativeInfAttr(elemType));
 }

-template <>
-Value getIdentityValue<ONNXReduceMinV13Op>(
+Value getReduceMinIdentityValue(
     ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
   MathBuilder createMath(rewriter, loc);
   return rewriter.create<stablehlo::ConstantOp>(
       loc, createMath.positiveInfAttr(elemType));
 }

-template <>
-Value getIdentityValue<ONNXReduceSumOp>(
+Value getReduceSumIdentityValue(
     ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
   return rewriter.create<stablehlo::ConstantOp>(
       loc, rewriter.getZeroAttr(elemType));
 }

-template <>
-Value getIdentityValue<ONNXReduceSumV11Op>(
+Value getReduceMeanIdentityValue(
     ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
   return rewriter.create<stablehlo::ConstantOp>(
       loc, rewriter.getZeroAttr(elemType));
 }

+template <>
+Value getIdentityValue<ONNXReduceMaxOp>(
+    ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
+  return getReduceMaxIdentityValue(rewriter, loc, elemType);
+}
+
+template <>
+Value getIdentityValue<ONNXReduceMaxV13Op>(
+    ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
+  return getReduceMaxIdentityValue(rewriter, loc, elemType);
+}
+
+template <>
+Value getIdentityValue<ONNXReduceMinOp>(
+    ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
+  return getReduceMinIdentityValue(rewriter, loc, elemType);
+}
+
+template <>
+Value getIdentityValue<ONNXReduceMinV13Op>(
+    ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
+  return getReduceMinIdentityValue(rewriter, loc, elemType);
+}
+
+template <>
+Value getIdentityValue<ONNXReduceSumOp>(
+    ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
+  return getReduceSumIdentityValue(rewriter, loc, elemType);
+}
+
+template <>
+Value getIdentityValue<ONNXReduceSumV11Op>(
+    ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
+  return getReduceSumIdentityValue(rewriter, loc, elemType);
+}
+
+template <>
+Value getIdentityValue<ONNXReduceMeanOp>(
+    ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
+  return getReduceMeanIdentityValue(rewriter, loc, elemType);
+}
+
 template <>
 Value getIdentityValue<ONNXReduceMeanV13Op>(
     ConversionPatternRewriter &rewriter, Location loc, Type elemType) {
-  return rewriter.create<stablehlo::ConstantOp>(
-      loc, rewriter.getZeroAttr(elemType));
+  return getReduceMeanIdentityValue(rewriter, loc, elemType);
 }

 template <typename ONNXReductionOp>
@@ -78,12 +115,9 @@ llvm::SmallVector<int64_t, 4> getDefinedAxes(Operation *op) {
   return definedAxes;
 }

-template <>
-llvm::SmallVector<int64_t, 4> getDefinedAxes<ONNXReduceSumOp>(Operation *op) {
+llvm::SmallVector<int64_t, 4> getDefinedAxesFromConstAxes(
+    Operation *op, Value axesValue, bool keepDims) {
   llvm::SmallVector<int64_t, 4> definedAxes;
-  ONNXReduceSumOp reduceSumOp = cast<ONNXReduceSumOp>(op);
-  Value axesValue = reduceSumOp.getAxes();
-
   // Assume it is verified that axes are known. Convert DenseElementsAttr to
   // ArrayAttr.
   if (!isNoneValue(axesValue) && getONNXConstantOp(axesValue)) {
@@ -104,7 +138,7 @@ llvm::SmallVector<int64_t, 4> getDefinedAxes<ONNXReduceSumOp>(Operation *op) {
   assert(inputType != nullptr && outputType != nullptr &&
          "not implemented for dynamic axes when either input or output is not "
          "ranked");
-  bool keepDims = reduceSumOp.getKeepdims() == 1;
+
   int64_t inputRank = inputType.getRank();
   int64_t outputRank = outputType.getRank();
   llvm::ArrayRef<int64_t> inputShape = inputType.getShape();
@@ -127,22 +161,69 @@ llvm::SmallVector<int64_t, 4> getDefinedAxes<ONNXReduceSumOp>(Operation *op) {
   return definedAxes;
 }

+template <>
+llvm::SmallVector<int64_t, 4> getDefinedAxes<ONNXReduceMaxOp>(Operation *op) {
+  ONNXReduceMaxOp reduceMaxOp = cast<ONNXReduceMaxOp>(op);
+  Value axesValue = reduceMaxOp.getAxes();
+  bool keepDims = reduceMaxOp.getKeepdims() == 1;
+  return getDefinedAxesFromConstAxes(op, axesValue, keepDims);
+}
+
+template <>
+llvm::SmallVector<int64_t, 4> getDefinedAxes<ONNXReduceMinOp>(Operation *op) {
+  ONNXReduceMinOp reduceMinOp = cast<ONNXReduceMinOp>(op);
+  Value axesValue = reduceMinOp.getAxes();
+  bool keepDims = reduceMinOp.getKeepdims() == 1;
+  return getDefinedAxesFromConstAxes(op, axesValue, keepDims);
+}
+
+template <>
+llvm::SmallVector<int64_t, 4> getDefinedAxes<ONNXReduceSumOp>(Operation *op) {
+  ONNXReduceSumOp reduceSumOp = cast<ONNXReduceSumOp>(op);
+  Value axesValue = reduceSumOp.getAxes();
+  bool keepDims = reduceSumOp.getKeepdims() == 1;
+  return getDefinedAxesFromConstAxes(op, axesValue, keepDims);
+}
+
+template <>
+llvm::SmallVector<int64_t, 4> getDefinedAxes<ONNXReduceMeanOp>(Operation *op) {
+  ONNXReduceMeanOp reduceMeanOp = cast<ONNXReduceMeanOp>(op);
+  Value axesValue = reduceMeanOp.getAxes();
+  bool keepDims = reduceMeanOp.getKeepdims() == 1;
+  return getDefinedAxesFromConstAxes(op, axesValue, keepDims);
+}
+
 // Block reduce ops
 template <typename ReductionOp>
 struct BlockReduceOp {
   using Op = void;
 };

+template <>
+struct BlockReduceOp<ONNXReduceMaxOp> {
+  using Op = stablehlo::MaxOp;
+};
+
 template <>
 struct BlockReduceOp<ONNXReduceMaxV13Op> {
   using Op = stablehlo::MaxOp;
 };

+template <>
+struct BlockReduceOp<ONNXReduceMinOp> {
+  using Op = stablehlo::MinOp;
+};
+
 template <>
 struct BlockReduceOp<ONNXReduceMinV13Op> {
   using Op = stablehlo::MinOp;
 };

+template <>
+struct BlockReduceOp<ONNXReduceMeanOp> {
+  using Op = stablehlo::AddOp;
+};
+
 template <>
 struct BlockReduceOp<ONNXReduceMeanV13Op> {
   using Op = stablehlo::AddOp;
@@ -355,10 +436,14 @@ struct ONNXReductionOpLoweringToStablehlo : public ConversionPattern {

 void populateLoweringONNXReductionOpToStablehloPattern(
     RewritePatternSet &patterns, MLIRContext *ctx) {
-  patterns.insert<ONNXReductionOpLoweringToStablehlo<mlir::ONNXReduceMaxV13Op>,
+  patterns.insert<ONNXReductionOpLoweringToStablehlo<mlir::ONNXReduceMaxOp>,
+      ONNXReductionOpLoweringToStablehlo<mlir::ONNXReduceMaxV13Op>,
+      ONNXReductionOpLoweringToStablehlo<mlir::ONNXReduceMinOp>,
       ONNXReductionOpLoweringToStablehlo<mlir::ONNXReduceMinV13Op>,
       ONNXReductionOpLoweringToStablehlo<mlir::ONNXReduceSumOp>,
       ONNXReductionOpLoweringToStablehlo<mlir::ONNXReduceSumV11Op>>(ctx);
+  patterns.insert<ONNXReductionOpLoweringToStablehlo<mlir::ONNXReduceMeanOp>>(
+      ctx, /*computeMean=*/true);
   patterns
       .insert<ONNXReductionOpLoweringToStablehlo<mlir::ONNXReduceMeanV13Op>>(
           ctx, /*computeMean=*/true);
