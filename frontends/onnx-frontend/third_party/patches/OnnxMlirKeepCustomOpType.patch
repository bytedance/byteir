diff --git a/src/Builder/FrontendDialectTransformer.cpp b/src/Builder/FrontendDialectTransformer.cpp
index 4594b9eb..d556946e 100644
--- a/src/Builder/FrontendDialectTransformer.cpp
+++ b/src/Builder/FrontendDialectTransformer.cpp
@@ -375,7 +375,7 @@ private:
   }
 
   std::optional<Type> ConvertOnnxType(const std::string &onnx_name) {
-    if (options_.useOnnxModelTypes) {
+    if (options_.useOnnxModelTypes || options_.keepCustomOpTypes) {
       if (const onnx::TypeProto *onnxTypePtr =
               onnx_type_map.GetByOnnxName(onnx_name)) {
         return std::optional<Type>(ImportType(*onnxTypePtr));
diff --git a/src/Builder/FrontendDialectTransformer.hpp b/src/Builder/FrontendDialectTransformer.hpp
index c45e2862..4f6c13b3 100644
--- a/src/Builder/FrontendDialectTransformer.hpp
+++ b/src/Builder/FrontendDialectTransformer.hpp
@@ -43,6 +43,7 @@ struct ImportOptions {
   // Use types/shapes in the input-model for translation (for intermediate
   // variables)
   bool useOnnxModelTypes = false;
+  bool keepCustomOpTypes = false;
   bool invokeOnnxVersionConverter = false;
   bool allowSorting = true;
   // Custom shape information for the graph inputs.
diff --git a/src/Compiler/CompilerOptions.cpp b/src/Compiler/CompilerOptions.cpp
index e68a35ac..58d9c4cb 100644
--- a/src/Compiler/CompilerOptions.cpp
+++ b/src/Compiler/CompilerOptions.cpp
@@ -49,6 +49,7 @@ bool preserveBitcode;                                  // onnx-mlir only
 bool preserveLLVMIR;                                   // onnx-mlir only
 bool preserveMLIR;                                     // onnx-mlir only
 bool useOnnxModelTypes;                                // onnx-mlir only
+bool keepCustomOpTypes;                             // onnx-mlir only
 int repeatOnnxTransform;                               // onnx-mlir only
 std::string shapeInformation;                          // onnx-mlir only
 ModelSize modelSize;                                   // onnx-mlir only
@@ -261,6 +262,11 @@ static llvm::cl::opt<bool, true> useOnnxModelTypesOpt("useOnnxModelTypes",
     llvm::cl::location(useOnnxModelTypes), llvm::cl::init(true),
     llvm::cl::cat(OnnxMlirOptions));
 
+static llvm::cl::opt<bool, true> keepCustomOpTypesOpt("keepCustomOpTypes",
+    llvm::cl::desc("keep custom op types and shapes from ONNX model"),
+    llvm::cl::location(keepCustomOpTypes), llvm::cl::init(false),
+    llvm::cl::cat(OnnxMlirOptions));
+
 static llvm::cl::opt<int, true> repeatOnnxTransformOpt("repeatOnnxTransform",
     llvm::cl::desc(
         "invoke extra onnx transform pass(shape inference, constant and etc.)"),
diff --git a/src/Compiler/CompilerOptions.hpp b/src/Compiler/CompilerOptions.hpp
index d4cc8607..22468972 100644
--- a/src/Compiler/CompilerOptions.hpp
+++ b/src/Compiler/CompilerOptions.hpp
@@ -92,6 +92,7 @@ extern bool preserveBitcode;                                  // onnx-mlir only
 extern bool preserveLLVMIR;                                   // onnx-mlir only
 extern bool preserveMLIR;                                     // onnx-mlir only
 extern bool useOnnxModelTypes;                                // onnx-mlir only
+extern bool keepCustomOpTypes;                                // onnx-mlir only
 extern int repeatOnnxTransform;                               // onnx-mlir only
 extern std::string shapeInformation;                          // onnx-mlir only
 extern ModelSize modelSize;                                   // onnx-mlir only
diff --git a/src/Compiler/CompilerUtils.cpp b/src/Compiler/CompilerUtils.cpp
index fe3a75ae..6792252e 100644
--- a/src/Compiler/CompilerUtils.cpp
+++ b/src/Compiler/CompilerUtils.cpp
@@ -620,6 +620,7 @@ int processInputFile(StringRef inputFilename, mlir::MLIRContext &context,
     ImportOptions options;
     options.verboseOutput = VerboseOutput;
     options.useOnnxModelTypes = useOnnxModelTypes;
+    options.keepCustomOpTypes = keepCustomOpTypes;
     options.invokeOnnxVersionConverter = invokeOnnxVersionConverter;
     options.shapeInformation = shapeInformation;
     options.allowSorting = allowSorting;
@@ -639,6 +640,7 @@ int processInputArray(const void *onnxBuffer, int bufferSize,
     std::string *errorMessage) {
   ImportOptions options;
   options.useOnnxModelTypes = useOnnxModelTypes;
+  options.keepCustomOpTypes = keepCustomOpTypes;
   options.invokeOnnxVersionConverter = invokeOnnxVersionConverter;
   options.allowSorting = allowSorting;
   options.shapeInformation = shapeInformation;
