# Match the minimum required version of LLVM and MLIR
cmake_minimum_required(VERSION 3.13.4)

project(byteir C CXX)

include(CheckCXXCompilerFlag)
include(CheckLanguage)

set(CMAKE_CXX_STANDARD 17)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

if (NOT CMAKE_BUILD_TYPE)
  message(STATUS "No build type selected, default to Debug")
  set(CMAKE_BUILD_TYPE "Debug" CACHE STRING "Build type (default Debug)" FORCE)
endif()

# CMP0116: Ninja generators transform `DEPFILE`s from `add_custom_command()`
# New in CMake 3.20. https://cmake.org/cmake/help/latest/policy/CMP0116.html
# Use the same setting as llvm-project
if (POLICY CMP0116)
  cmake_policy(SET CMP0116 OLD)
endif()

if (MSVC)
  # Disable warnings generated by onnx but treated as errors by onnx
  # See: https://github.com/onnx/onnx/issues/3530
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -wd4125")
else()
  if (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    add_compile_options(-fno-gnu-unique)
  endif()
  # Global compile options for GCC and clang
  add_compile_options(-fno-operator-names)
endif()

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin)

option(BYTEIR_INCLUDE_TESTS "Generate build targets for the ByteIR unit tests." ON)
if (BYTEIR_INCLUDE_TESTS)
  add_definitions(-DBYTEIR_INCLUDE_TESTS)
endif()


# Set Path
set(REPO_ROOT_DIR ${PROJECT_SOURCE_DIR}/..)
get_filename_component(REPO_ROOT_DIR "${REPO_ROOT_DIR}" ABSOLUTE)
message("REPO_ROOT_DIR = ${REPO_ROOT_DIR}")

## Build the off tree projects
set(BYTEIR_SRC_INCLUDE_DIR ${REPO_ROOT_DIR}/include)
set(BYTEIR_BIN_INCLUDE_DIR ${CMAKE_BINARY_DIR}/include)

if(MSVC)
  set(BYTEIR_BIN_LIB_DIR ${CMAKE_BINARY_DIR}/lib/${CMAKE_BUILD_TYPE})
else()
  set(BYTEIR_BIN_LIB_DIR ${CMAKE_BINARY_DIR}/lib)
endif()

option(LLVM_INSTALL_PATH "The path to the built LLVM library")
get_filename_component(LLVM_INSTALL_PATH ${LLVM_INSTALL_PATH} ABSOLUTE)

set(LLVM_INSTALL_DIR "${LLVM_INSTALL_PATH}")
if(MSVC)
  set(LLVM_TOOLS_DIR "${LLVM_INSTALL_PATH}/${CMAKE_BUILD_TYPE}/bin")
else()
  set(LLVM_TOOLS_DIR "${LLVM_INSTALL_PATH}/bin")
endif()

if(NOT DEFINED LLVM_EXTERNAL_LIT)
  set(LLVM_EXTERNAL_LIT "${LLVM_TOOLS_DIR}/llvm-lit.py" CACHE PATH "PATH to llvm-lit")
endif()

set(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/bin)
set(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/lib)

set(MLIR_DIR "${LLVM_INSTALL_DIR}/lib/cmake/mlir")
include(MLIR.cmake)
include(mhlo.cmake)

include_directories(${BYTEIR_SRC_INCLUDE_DIR})
include_directories(${BYTEIR_BIN_INCLUDE_DIR})

## Build all lib and include
add_subdirectory(${REPO_ROOT_DIR}/lib ${CMAKE_BINARY_DIR}/lib)
add_subdirectory(${REPO_ROOT_DIR}/include ${CMAKE_BINARY_DIR}/include)

# Build tools
add_subdirectory(${REPO_ROOT_DIR}/tools ${CMAKE_BINARY_DIR}/tools)

if(MSVC)
  set(BYTEIR_TOOLS_DIR ${CMAKE_BINARY_DIR}/bin/${CMAKE_BUILD_TYPE})
else()
  set(BYTEIR_TOOLS_DIR ${CMAKE_BINARY_DIR}/bin)
endif()
message(STATUS "BYTEIR_TOOLS_DIR ${BYTEIR_TOOLS_DIR}")

# Install headers, following https://github.com/llvm/llvm-project/blob/main/mlir/CMakeLists.txt#L158-L188
install(DIRECTORY ${BYTEIR_SRC_INCLUDE_DIR}/byteir
  DESTINATION include
  COMPONENT byteir-headers
  FILES_MATCHING
  PATTERN "*.def"
  PATTERN "*.h"
  PATTERN "*.inc"
  PATTERN "*.td"
  )

install(DIRECTORY ${BYTEIR_BIN_INCLUDE_DIR}/byteir
  DESTINATION include
  COMPONENT byteir-headers
  FILES_MATCHING
  PATTERN "*.def"
  PATTERN "*.h"
  PATTERN "*.gen"
  PATTERN "*.inc"
  PATTERN "*.td"
  PATTERN "CMakeFiles" EXCLUDE
  PATTERN "config.h" EXCLUDE
  )

if(NOT LLVM_ENABLE_IDE)
  add_llvm_install_targets(install-byteir-headers
                           DEPENDS byteir-headers
                           COMPONENT byteir-headers)
endif()

## Add unit tests
set(BYTEIR_TEST_BUILD_DIR "${CMAKE_BINARY_DIR}/test")
set(BYTEIR_TEST_SOURCE_DIR "${REPO_ROOT_DIR}/test")
add_subdirectory(${BYTEIR_TEST_SOURCE_DIR} ${BYTEIR_TEST_BUILD_DIR})

## Add numerical tests
set(BYTEIR_NUMERICAL_BUILD_DIR "${CMAKE_BINARY_DIR}/numerical")
set(BYTEIR_NUMERICAL_SOURCE_DIR "${REPO_ROOT_DIR}/numerical")
add_subdirectory(${BYTEIR_NUMERICAL_SOURCE_DIR} ${BYTEIR_NUMERICAL_BUILD_DIR})

