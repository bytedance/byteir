// RUN: byteir-translate %s --mlir-to-llvmir | FileCheck %s

// CHECK-LABEL: define void @_mlir_ciface_Unknown

module attributes {byre.container_module} {
  llvm.func @Unknown0(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: i64, %arg3: !llvm.ptr, %arg4: !llvm.ptr, %arg5: i64, %arg6: !llvm.ptr, %arg7: !llvm.ptr, %arg8: i64, %arg9: i64, %arg10: i64, %arg11: i64, %arg12: i64) attributes {__byre__kernel_name = "Unknown0", __byre__llvm_file_name = "host_kernels.ll", __byteir_hlo_aggressive_fusion__, arg_offsets = [0 : i32, 1 : i32, 2 : i32], byre_compute_name = "LLVMJITOp", byre_force_compute_name, llvm.emit_c_interface} {
    %0 = llvm.mlir.constant(97 : index) : i64
    %1 = llvm.mlir.constant(0 : index) : i64
    %2 = llvm.mlir.constant(1 : index) : i64
    %3 = llvm.mlir.constant(1103515245 : i32) : i32
    %4 = llvm.mlir.constant(12345 : i32) : i32
    %5 = llvm.mlir.constant(3528531795 : i64) : i64
    %6 = llvm.mlir.constant(3449720151 : i64) : i64
    %7 = llvm.mlir.constant(32 : i64) : i64
    %8 = llvm.mlir.constant(-1640531527 : i32) : i32
    %9 = llvm.mlir.constant(-1150833019 : i32) : i32
    %10 = llvm.mlir.constant(2.32830644E-10 : f32) : f32
    %11 = llvm.mlir.constant(1.16415322E-10 : f32) : f32
    %12 = llvm.mlir.constant(1013904242 : i32) : i32
    %13 = llvm.mlir.constant(1993301258 : i32) : i32
    %14 = llvm.mlir.constant(-626627285 : i32) : i32
    %15 = llvm.mlir.constant(842468239 : i32) : i32
    %16 = llvm.mlir.constant(2027808484 : i32) : i32
    %17 = llvm.mlir.constant(-308364780 : i32) : i32
    %18 = llvm.mlir.constant(387276957 : i32) : i32
    %19 = llvm.mlir.constant(-1459197799 : i32) : i32
    %20 = llvm.mlir.constant(-1253254570 : i32) : i32
    %21 = llvm.mlir.constant(1684936478 : i32) : i32
    %22 = llvm.mlir.constant(1401181199 : i32) : i32
    %23 = llvm.mlir.constant(534103459 : i32) : i32
    %24 = llvm.mlir.constant(-616729560 : i32) : i32
    %25 = llvm.mlir.constant(-1879881855 : i32) : i32
    %26 = llvm.mlir.constant(0.000000e+00 : f32) : f32
    llvm.br ^bb1(%1 : i64)
  ^bb1(%27: i64):  // 2 preds: ^bb0, ^bb2
    %28 = llvm.icmp "slt" %27, %0 : i64
    llvm.cond_br %28, ^bb2, ^bb3
  ^bb2:  // pred: ^bb1
    %29 = llvm.load %arg1 : !llvm.ptr -> i64
    %30 = llvm.load %arg4 : !llvm.ptr -> i64
    %31 = llvm.trunc %29 : i64 to i32
    %32 = llvm.trunc %30 : i64 to i32
    %33 = llvm.add %31, %32  : i32
    %34 = llvm.mul %33, %3  : i32
    %35 = llvm.add %34, %4  : i32
    %36 = llvm.trunc %27 : i64 to i32
    %37 = llvm.add %36, %35  : i32
    %38 = llvm.mul %37, %3  : i32
    %39 = llvm.add %38, %4  : i32
    %40 = llvm.zext %39 : i32 to i64
    %41 = llvm.mul %40, %5  : i64
    %42 = llvm.trunc %41 : i64 to i32
    %43 = llvm.lshr %41, %7  : i64
    %44 = llvm.trunc %43 : i64 to i32
    %45 = llvm.xor %44, %32  : i32
    %46 = llvm.add %31, %8  : i32
    %47 = llvm.add %32, %9  : i32
    %48 = llvm.zext %31 : i32 to i64
    %49 = llvm.zext %45 : i32 to i64
    %50 = llvm.mul %48, %5  : i64
    %51 = llvm.trunc %50 : i64 to i32
    %52 = llvm.lshr %50, %7  : i64
    %53 = llvm.trunc %52 : i64 to i32
    %54 = llvm.mul %49, %6  : i64
    %55 = llvm.trunc %54 : i64 to i32
    %56 = llvm.lshr %54, %7  : i64
    %57 = llvm.trunc %56 : i64 to i32
    %58 = llvm.xor %57, %46  : i32
    %59 = llvm.xor %53, %42  : i32
    %60 = llvm.xor %59, %47  : i32
    %61 = llvm.add %31, %12  : i32
    %62 = llvm.add %32, %13  : i32
    %63 = llvm.zext %58 : i32 to i64
    %64 = llvm.zext %60 : i32 to i64
    %65 = llvm.mul %63, %5  : i64
    %66 = llvm.trunc %65 : i64 to i32
    %67 = llvm.lshr %65, %7  : i64
    %68 = llvm.trunc %67 : i64 to i32
    %69 = llvm.mul %64, %6  : i64
    %70 = llvm.trunc %69 : i64 to i32
    %71 = llvm.lshr %69, %7  : i64
    %72 = llvm.trunc %71 : i64 to i32
    %73 = llvm.xor %72, %55  : i32
    %74 = llvm.xor %73, %61  : i32
    %75 = llvm.xor %68, %51  : i32
    %76 = llvm.xor %75, %62  : i32
    %77 = llvm.add %31, %14  : i32
    %78 = llvm.add %32, %15  : i32
    %79 = llvm.zext %74 : i32 to i64
    %80 = llvm.zext %76 : i32 to i64
    %81 = llvm.mul %79, %5  : i64
    %82 = llvm.trunc %81 : i64 to i32
    %83 = llvm.lshr %81, %7  : i64
    %84 = llvm.trunc %83 : i64 to i32
    %85 = llvm.mul %80, %6  : i64
    %86 = llvm.trunc %85 : i64 to i32
    %87 = llvm.lshr %85, %7  : i64
    %88 = llvm.trunc %87 : i64 to i32
    %89 = llvm.xor %88, %70  : i32
    %90 = llvm.xor %89, %77  : i32
    %91 = llvm.xor %84, %66  : i32
    %92 = llvm.xor %91, %78  : i32
    %93 = llvm.add %31, %16  : i32
    %94 = llvm.add %32, %17  : i32
    %95 = llvm.zext %90 : i32 to i64
    %96 = llvm.zext %92 : i32 to i64
    %97 = llvm.mul %95, %5  : i64
    %98 = llvm.trunc %97 : i64 to i32
    %99 = llvm.lshr %97, %7  : i64
    %100 = llvm.trunc %99 : i64 to i32
    %101 = llvm.mul %96, %6  : i64
    %102 = llvm.trunc %101 : i64 to i32
    %103 = llvm.lshr %101, %7  : i64
    %104 = llvm.trunc %103 : i64 to i32
    %105 = llvm.xor %104, %86  : i32
    %106 = llvm.xor %105, %93  : i32
    %107 = llvm.xor %100, %82  : i32
    %108 = llvm.xor %107, %94  : i32
    %109 = llvm.add %31, %18  : i32
    %110 = llvm.add %32, %19  : i32
    %111 = llvm.zext %106 : i32 to i64
    %112 = llvm.zext %108 : i32 to i64
    %113 = llvm.mul %111, %5  : i64
    %114 = llvm.trunc %113 : i64 to i32
    %115 = llvm.lshr %113, %7  : i64
    %116 = llvm.trunc %115 : i64 to i32
    %117 = llvm.mul %112, %6  : i64
    %118 = llvm.trunc %117 : i64 to i32
    %119 = llvm.lshr %117, %7  : i64
    %120 = llvm.trunc %119 : i64 to i32
    %121 = llvm.xor %120, %102  : i32
    %122 = llvm.xor %121, %109  : i32
    %123 = llvm.xor %116, %98  : i32
    %124 = llvm.xor %123, %110  : i32
    %125 = llvm.add %31, %20  : i32
    %126 = llvm.add %32, %21  : i32
    %127 = llvm.zext %122 : i32 to i64
    %128 = llvm.zext %124 : i32 to i64
    %129 = llvm.mul %127, %5  : i64
    %130 = llvm.trunc %129 : i64 to i32
    %131 = llvm.lshr %129, %7  : i64
    %132 = llvm.trunc %131 : i64 to i32
    %133 = llvm.mul %128, %6  : i64
    %134 = llvm.trunc %133 : i64 to i32
    %135 = llvm.lshr %133, %7  : i64
    %136 = llvm.trunc %135 : i64 to i32
    %137 = llvm.xor %136, %118  : i32
    %138 = llvm.xor %137, %125  : i32
    %139 = llvm.xor %132, %114  : i32
    %140 = llvm.xor %139, %126  : i32
    %141 = llvm.add %31, %22  : i32
    %142 = llvm.add %32, %23  : i32
    %143 = llvm.zext %138 : i32 to i64
    %144 = llvm.zext %140 : i32 to i64
    %145 = llvm.mul %143, %5  : i64
    %146 = llvm.trunc %145 : i64 to i32
    %147 = llvm.lshr %145, %7  : i64
    %148 = llvm.trunc %147 : i64 to i32
    %149 = llvm.mul %144, %6  : i64
    %150 = llvm.lshr %149, %7  : i64
    %151 = llvm.trunc %150 : i64 to i32
    %152 = llvm.xor %151, %134  : i32
    %153 = llvm.xor %152, %141  : i32
    %154 = llvm.xor %148, %130  : i32
    %155 = llvm.xor %154, %142  : i32
    %156 = llvm.add %32, %24  : i32
    %157 = llvm.zext %153 : i32 to i64
    %158 = llvm.zext %155 : i32 to i64
    %159 = llvm.mul %157, %5  : i64
    %160 = llvm.lshr %159, %7  : i64
    %161 = llvm.trunc %160 : i64 to i32
    %162 = llvm.mul %158, %6  : i64
    %163 = llvm.trunc %162 : i64 to i32
    %164 = llvm.xor %161, %146  : i32
    %165 = llvm.xor %164, %156  : i32
    %166 = llvm.add %31, %25  : i32
    %167 = llvm.zext %165 : i32 to i64
    %168 = llvm.mul %167, %6  : i64
    %169 = llvm.lshr %168, %7  : i64
    %170 = llvm.trunc %169 : i64 to i32
    %171 = llvm.xor %170, %163  : i32
    %172 = llvm.xor %171, %166  : i32
    %173 = llvm.uitofp %172 : i32 to f32
    %174 = llvm.fmul %173, %10  : f32
    %175 = llvm.fadd %174, %11  : f32
    %176 = llvm.fadd %175, %26  : f32
    %177 = llvm.mul %1, %0  : i64
    %178 = llvm.add %177, %27  : i64
    %179 = llvm.getelementptr %arg7[%178] : (!llvm.ptr, i64) -> !llvm.ptr, f32
    llvm.store %176, %179 : f32, !llvm.ptr
    %180 = llvm.add %27, %2  : i64
    llvm.br ^bb1(%180 : i64)
  ^bb3:  // pred: ^bb1
    llvm.return
  }
  llvm.func @_mlir_ciface_Unknown0(%arg0: !llvm.ptr, %arg1: !llvm.ptr, %arg2: !llvm.ptr) attributes {__byre__kernel_name = "Unknown0", __byre__llvm_file_name = "host_kernels.ll", __byteir_hlo_aggressive_fusion__, arg_offsets = [0 : i32, 1 : i32, 2 : i32], byre_compute_name = "LLVMJITOp", byre_force_compute_name, llvm.emit_c_interface} {
    %0 = llvm.load %arg0 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64)>
    %1 = llvm.extractvalue %0[0] : !llvm.struct<(ptr, ptr, i64)> 
    %2 = llvm.extractvalue %0[1] : !llvm.struct<(ptr, ptr, i64)> 
    %3 = llvm.extractvalue %0[2] : !llvm.struct<(ptr, ptr, i64)> 
    %4 = llvm.load %arg1 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64)>
    %5 = llvm.extractvalue %4[0] : !llvm.struct<(ptr, ptr, i64)> 
    %6 = llvm.extractvalue %4[1] : !llvm.struct<(ptr, ptr, i64)> 
    %7 = llvm.extractvalue %4[2] : !llvm.struct<(ptr, ptr, i64)> 
    %8 = llvm.load %arg2 : !llvm.ptr -> !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)>
    %9 = llvm.extractvalue %8[0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %10 = llvm.extractvalue %8[1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %11 = llvm.extractvalue %8[2] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %12 = llvm.extractvalue %8[3, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %13 = llvm.extractvalue %8[3, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %14 = llvm.extractvalue %8[4, 0] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    %15 = llvm.extractvalue %8[4, 1] : !llvm.struct<(ptr, ptr, i64, array<2 x i64>, array<2 x i64>)> 
    llvm.call @Unknown0(%1, %2, %3, %5, %6, %7, %9, %10, %11, %12, %13, %14, %15) : (!llvm.ptr, !llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, !llvm.ptr, !llvm.ptr, i64, i64, i64, i64, i64) -> ()
    llvm.return
  }
}