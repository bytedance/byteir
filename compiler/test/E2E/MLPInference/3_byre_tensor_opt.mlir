// RUN: byteir-opt %s -byre-tensor-opt="append-arg-types entry-func=forward" | FileCheck %s

// CHECK-LABEL: func.func @forward

#map = affine_map<() -> ()>
module attributes {torch.debug_module_name = "GraphModule"} {
  func.func private @Unknown0(%arg0: tensor<20xf32>, %arg1: tensor<2x20xf32>) -> tensor<2x20xf32> attributes {__byteir_elementwise_fusion__} {
    %c20 = arith.constant 20 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %cst = arith.constant 0.000000e+00 : f32
    %0 = tensor.empty() : tensor<2x20xf32>
    %1 = scf.for %arg2 = %c0 to %c2 step %c1 iter_args(%arg3 = %0) -> (tensor<2x20xf32>) {
      %2 = scf.for %arg4 = %c0 to %c20 step %c1 iter_args(%arg5 = %arg3) -> (tensor<2x20xf32>) {
        %extracted_slice = tensor.extract_slice %arg0[%arg4] [1] [1] : tensor<20xf32> to tensor<f32>
        %extracted_slice_0 = tensor.extract_slice %arg1[%arg2, %arg4] [1, 1] [1, 1] : tensor<2x20xf32> to tensor<f32>
        %3 = tensor.empty() : tensor<f32>
        %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = []} ins(%extracted_slice, %extracted_slice_0 : tensor<f32>, tensor<f32>) outs(%3 : tensor<f32>) {
        ^bb0(%in: f32, %in_1: f32, %out: f32):
          %5 = arith.addf %in_1, %in : f32
          %6 = arith.maximumf %5, %cst : f32
          linalg.yield %6 : f32
        } -> tensor<f32>
        %inserted_slice = tensor.insert_slice %4 into %arg5[%arg2, %arg4] [1, 1] [1, 1] : tensor<f32> into tensor<2x20xf32>
        scf.yield %inserted_slice : tensor<2x20xf32>
      }
      scf.yield %2 : tensor<2x20xf32>
    }
    return %1 : tensor<2x20xf32>
  }
  func.func private @Unknown2(%arg0: tensor<10xf32>, %arg1: tensor<2x10xf32>) -> tensor<2x10xf32> attributes {__byteir_elementwise_fusion__} {
    %c10 = arith.constant 10 : index
    %c1 = arith.constant 1 : index
    %c2 = arith.constant 2 : index
    %c0 = arith.constant 0 : index
    %0 = tensor.empty() : tensor<2x10xf32>
    %1 = scf.for %arg2 = %c0 to %c2 step %c1 iter_args(%arg3 = %0) -> (tensor<2x10xf32>) {
      %2 = scf.for %arg4 = %c0 to %c10 step %c1 iter_args(%arg5 = %arg3) -> (tensor<2x10xf32>) {
        %extracted_slice = tensor.extract_slice %arg0[%arg4] [1] [1] : tensor<10xf32> to tensor<f32>
        %extracted_slice_0 = tensor.extract_slice %arg1[%arg2, %arg4] [1, 1] [1, 1] : tensor<2x10xf32> to tensor<f32>
        %3 = tensor.empty() : tensor<f32>
        %4 = linalg.generic {indexing_maps = [#map, #map, #map], iterator_types = []} ins(%extracted_slice, %extracted_slice_0 : tensor<f32>, tensor<f32>) outs(%3 : tensor<f32>) {
        ^bb0(%in: f32, %in_1: f32, %out: f32):
          %5 = arith.addf %in_1, %in : f32
          linalg.yield %5 : f32
        } -> tensor<f32>
        %inserted_slice = tensor.insert_slice %4 into %arg5[%arg2, %arg4] [1, 1] [1, 1] : tensor<f32> into tensor<2x10xf32>
        scf.yield %inserted_slice : tensor<2x10xf32>
      }
      scf.yield %2 : tensor<2x10xf32>
    }
    return %1 : tensor<2x10xf32>
  }
  func.func @forward(%arg0: tensor<2x10xf32>) -> tensor<2x10xf32> {
    %0 = mhlo.constant dense<"0xtensor<20x10xf32>
    %1 = mhlo.constant dense<[0.101879634, -0.178835288, -0.0953023583, -0.0698504745, -0.19658649, -0.297641844, -0.223349303, 0.168986112, 9.007710e-02, 0.101534814, -0.0601868108, -0.0958566219, -0.243612081, 0.198881537, -0.293788224, -0.240900397, 0.184188008, 0.210917979, 0.121171109, -0.155078679]> : tensor<20xf32>
    %2 = mhlo.constant dense<"0xtensor<20x20xf32>
    %3 = mhlo.constant dense<[0.124238588, -0.0375917405, -0.178324029, 2.1018261E-4, -0.0708629936, 0.179958493, 0.201986402, -0.0302014686, -0.0842267424, 0.0796111747, 0.0201944318, -0.183529228, -0.133614406, -0.0192934573, 0.193412527, 0.219010666, -0.0464102961, 0.00334274326, -0.0029087835, 0.0903228372]> : tensor<20xf32>
    %4 = mhlo.constant dense<"0xtensor<10x20xf32>
    %5 = mhlo.constant dense<[0.0670170113, 0.0825609341, -0.125343189, -0.0073415176, -0.100303039, -0.214000896, 0.114002995, 0.21737574, 0.166609675, -0.119800359]> : tensor<10xf32>
    %6 = "mhlo.dot_general"(%arg0, %0) {dot_dimension_numbers = #mhlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>} : (tensor<2x10xf32>, tensor<20x10xf32>) -> tensor<2x20xf32>
    %7 = call @Unknown0(%1, %6) : (tensor<20xf32>, tensor<2x20xf32>) -> tensor<2x20xf32>
    %8 = "mhlo.dot_general"(%7, %2) {dot_dimension_numbers = #mhlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>} : (tensor<2x20xf32>, tensor<20x20xf32>) -> tensor<2x20xf32>
    %9 = call @Unknown0(%3, %8) : (tensor<20xf32>, tensor<2x20xf32>) -> tensor<2x20xf32>
    %10 = "mhlo.dot_general"(%9, %4) {dot_dimension_numbers = #mhlo.dot<lhs_contracting_dimensions = [1], rhs_contracting_dimensions = [1]>} : (tensor<2x20xf32>, tensor<10x20xf32>) -> tensor<2x10xf32>
    %11 = call @Unknown2(%5, %10) : (tensor<10xf32>, tensor<2x10xf32>) -> tensor<2x10xf32>
    return %11 : tensor<2x10xf32>
  }
}